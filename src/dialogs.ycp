/**
 * File:	include/cd-creator/dialogs.ycp
 * Package:	Configuration of cd-creator
 * Summary:	Dialogs definitions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

    textdomain "cd-creator";

    import "CDCreator";
    import "Wizard";
    import "SourceManager";
    import "Report";
    import "URL";
    import "StorageDevices";
    import "Arch";
    import "Label";
    import "URL";

    include "cd-creator/helps.ycp";

    /**
       Create a table item from a map as returned by the InstSrcManager agent.
       @param source The map describing the source as returned form the agent.
       @return An item suitable for addition to a Table.
    */
    term createTableItem( integer source ,
            boolean selectable, 
            string media_filter) {

        // Source data
	map sd = SourceManager::SourceData(source);
	term item = `item();

	map url = URL::Parse(sd["url"]:"");
	if (media_filter == "" || url["scheme"]:"" == media_filter )
	{
	    if (selectable)
		item = `item(
			     `id( source ),
			     "",
			     // corresponds to the "Enable/Disable" button
			     sd["enabled"]:true ? _("On") : _("Off"),
			     sd["label"]:"unknown",
			     sd["url"]:""
			     );
	    else
		item = `item(
			     `id( source ),
			     // corresponds to the "Enable/Disable" button
			     sd["enabled"]:true ? _("On") : _("Off"),
			     sd["label"]:"unknown",
			     sd["url"]:""
			     );
	}
	return item;
    }

    /**
     * Fill sources table with entries from the InstSrcManager agent.
     * @return list list of items
     */
    list<term> fillSourceTable(list<integer> sources, boolean selectable, string media_filter) {
	if (size(sources) == 0 )
	    sources = Pkg::SourceGetCurrent ( false );

        list<term> items = [];

	items = maplist(integer source, sources, ``{
                y2debug("working on source: %1", source);
	        return(createTableItem( source , selectable, media_filter));
	});
        items  = filter(term i, items, ``(i[3]:""!=""));

	return items;

    }

    

    /**
     * General configuration dialog
     * @return dialog result
     */
    define symbol Configure1Dialog () ``{

        /* CDCreator configure1 dialog caption */
        string caption = _("CD Creator Configuration");


        string source = CDCreator::Config["source"]:"";
        string name = CDCreator::Config["name"]:"";
        string pkgtype = CDCreator::Config["pkgtype"]:"package-manager";

        // Autoyast
        string profile = CDCreator::Config["profile"]:"";
        boolean copy_profile = CDCreator::Config["copy_profile"]:false;


        // List
        string plain_list = CDCreator::Config["package-list"]:"";


        term c2 =
            `HBox(
                    `HWeight(10, `Empty()),
                    `HWeight(80, `VBox(
                            `VSquash(
                                `HBox(
                                    `TextEntry(`id(`profile_loc), _("Profile Loca&tion:"), profile),
                                    `VBox(
                                        `VSpacing(),
                                        `Bottom(`PushButton(`id(`open_profile), _("Select Fi&le")))
                                        )
                                    )
                                ),
                            `Left(`CheckBox(`id(`copyprofile), _("Copy Profile to CD I&mage"), copy_profile))
                            )
                        )
                 );

        term v =
            `VBox (
                    // radio button label
                    `Left (`RadioButton (`id (`pkgmgr), `opt (`notify), _("Pac&kage Manager"), pkgtype == "package-manager")),
                    // radio button label
                    `Left (`RadioButton (`id (`autoyast), `opt (`notify), _("&AutoYaST Control File"), pkgtype == "autoyast")),
                    c2
                  );


        list sources = []; // CDCreator::GetDirSources(source);
        /* CDCreator configure1 dialog contents */
        term contents =
            `HVSquash
            (
             `VBox(
                 `TextEntry(`id(`name), _("&Configuration Name:"), name),
                 `Frame(_("Packages"),
                     `VBox(
                         `RadioButtonGroup (
                             `id (`pkg),
                             v
                             )
                         )
                     )
                 )
            );

        Wizard::SetContentsButtons(caption, contents, HELPS["initial"]:"",
                Label::BackButton(), Label::NextButton());



        any ret = nil;
        symbol rb =`none;
        while(true) {

            rb = (symbol) UI::QueryWidget (`id (`pkg), `CurrentButton );

            if (rb  == `autoyast)
            {
                UI::ChangeWidget (`id(`profile_loc), `Enabled, true);
                UI::ChangeWidget (`id(`open_profile), `Enabled, true);
                UI::ChangeWidget (`id(`copyprofile), `Enabled, true);
            }
            else if (rb == `plain )
            {
                UI::ChangeWidget (`id(`profile_loc), `Enabled, false);
                UI::ChangeWidget (`id(`open_profile), `Enabled, false);
                UI::ChangeWidget (`id(`copyprofile), `Enabled, false);
            }
            else  {
                UI::ChangeWidget (`id(`profile_loc), `Enabled, false);
                UI::ChangeWidget (`id(`open_profile), `Enabled, false);
                UI::ChangeWidget (`id(`copyprofile), `Enabled, false);
            }

            ret = UI::UserInput();



            /* abort? */
            if(ret == `abort || ret == `cancel) {
                if(CDCreator::ReallyAbort()) break;
                else continue;
            }
            else if(ret == `next ) {

                string name = (string)UI::QueryWidget(`id(`name), `Value);

                if (name == "")
                {
                    Report::Error(_("Enter the name of the configuration."));
                    continue;
                }
                if (haskey(CDCreator::Configs, name) &&
                        CDCreator::Config["name"]:"" != name)
                {
                    Report::Error(_("A configuration with this name already exists.
                                Select a new name.
"));
                                continue;
                }


                CDCreator::Config["old_name"] = CDCreator::Config["name"]:"";
                CDCreator::Config["name"] = name;



                if (rb  == `autoyast)
                {
                    CDCreator::Config["pkgtype"] = "autoyast";
                    CDCreator::Config["profile"] = (string)UI::QueryWidget(`id(`profile_loc), `Value);
                    CDCreator::Config["copy_profile"] = (boolean)UI::QueryWidget(`id(`copyprofile), `Value);
                }
                else  {
                    CDCreator::Config["pkgtype"] = "package-manager";
                }
                CDCreator::modified = true;
                CDCreator::profile_parsed = false;
                break;
            }
            else if ( ret == `back)
            {
                break;
            }
            else if (ret ==`open_profile)
            {
                any new_file = UI::AskForExistingFile( CDCreator::AYRepository , "*", _("Select File"));
                if (new_file != nil)
                {
                    UI::ChangeWidget(`id(`profile_loc), `Value, (string)new_file);
                }
                continue;
            }
            else {
                y2error("unexpected retcode: %1", ret);
                continue;
            }
        }

        return (symbol)ret;
    }

    /**
     * Configure2 dialog
     * @return dialog result
     */
    define symbol Configure2Dialog () ``{

        /* CDCreator configure2 dialog caption */
        string caption = _("CD Creator Configuration");

        string dirtree = CDCreator::Config["iso-directory"]:"";
        string publisher = CDCreator::Config["publisher"]:"";
        string preparer = CDCreator::Config["preparer"]:"";
        string result = CDCreator::Config["result"]:"iso";
        string db = CDCreator::Config["database"]:"original";
        string isofile_path = CDCreator::Config["isofile"]:"";
        boolean savespace = CDCreator::Config["savespace"]:false;

        if (isofile_path == "")
        {
            isofile_path = CDCreator::Config["name"]:"" + ".iso";
        }


        /* CDCreator configure2 dialog contents */
        term contents =
            `HVSquash
            (
             `VBox(
                 /*
                    `Frame(_("Package Database"),

                    `RadioButtonGroup(`id(`pkgdb),
                    `VBox(
                    `Left(`RadioButton(`id(`origdb), `opt (`notify), _("Use original Package &Database"), db == "original")),
                    `Left(`RadioButton(`id(`createdb),`opt (`notify),  _("Create ne&w Packa&ge Database"), db == "new" ))
                    )
                    )
                    ),*/
                 `Frame(_("Output:"),
                     `VBox(
                         `VSquash(
                             `HBox(
                                 `TextEntry(`id(`dirtree), _("&Path to Generated Directory Tree:"), dirtree),
                                 `VBox(
                                     `VSpacing(),
                                     `Bottom(`PushButton(`id(`open_dir), _("&Select Directory")))
                                     )
                                 )
                             ),
                         `RadioButtonGroup(`id(`result),
                             `VBox(
                                 `Left(`RadioButton(`id(`isofile),`opt (`notify), _("&Generate ISO Image File"), result == "iso")),
                                 `HBox(
                                     `HWeight(10, `Empty()),
                                     `HWeight(80,
                                         `VBox(
                                             `HBox(
                                                 `HWeight(2,`TextEntry(`id(`isofile_path), _("&ISO Image File:"), isofile_path)),
                                                 `HWeight(1, `Empty())
                                                 )
                                             )
                                         )
                                     ),
                                 `Left(`RadioButton(`id(`directory), `opt (`notify),  _("Create Directory &Tree Only"), result == "tree"))
                                 )
                             )
                             )

                             ),
                         `VSpacing(1),
                         `Frame(_("Other Options"),
                                 `VBox(
                                     `Left(`CheckBox(`id(`savespace), _("Copy only needed files to save space."), savespace)),
                                    `VSpacing(1),
                                     `Left(`TextEntry(`id(`pub), _("CD Publisher:"), publisher)),
                                     `Left(`TextEntry(`id(`prep), _("CD Preparer:"), preparer))
                                     )
                               )

                             )

                             );

                         Wizard::SetContentsButtons(caption, contents,
                                 HELPS["dest"]:"",
                                 Label::BackButton(), Label::NextButton());

                         any ret = nil;
                         while(true) {

                             symbol rb = (symbol)UI::QueryWidget(`id(`result), `CurrentButton);
                             if (rb == `isofile)
                             {
                                 UI::ChangeWidget(`id(`isofile_path), `Enabled, true);

                             }
                             else
                             {
                                 UI::ChangeWidget(`id(`isofile_path), `Enabled, false);

                             }


                             ret = UI::UserInput();

                             /* abort? */
                             if(ret == `abort || ret == `cancel) {
                                 if(CDCreator::ReallyAbort()) break;
                                 else continue;
                             }
                             else if (ret ==`open_dir)
                             {
                                 any new_dir = UI::AskForExistingDirectory( dirtree, _("Select Directory"));
                                 if (new_dir != nil)
                                 {
                                     UI::ChangeWidget(`id(`dirtree), `Value, (string) new_dir);
                                     /*
                                        string iso = (string)UI::QueryWidget(`id(`isofile_path), `Value);
                                        if (findfirstof( iso, "/") == nil && iso != "")
                                        {
                                        UI::ChangeWidget(`id(`isofile_path), `Value, new_dir + "/" + iso );
                                        }
                                      */
                                 }
                                 continue;
                             }
                             else if (ret == `back)
                             {
                                 break;
                             }
                             else if(ret == `next)
                             {
                                 /*
                                    symbol dbrb = (symbol)UI::QueryWidget(`id(`pkgdb), `CurrentButton);
                                    if (dbrb == `origdb)
                                    {
                                    CDCreator::Config["database"] = "original";
                                    }
                                    else
                                    {
                                    CDCreator::Config["database"] = "new" ;
                                    }

                                  */
                                 string isodir = (string) UI::QueryWidget(`id(`dirtree), `Value);
                                 if (isodir == "")
                                 {
                                     Report::Error(_("Path to generated directory tree missing."));
                                     continue;
                                 }
                                 else
                                 {
                                     CDCreator::Config["iso-directory"] = isodir;
                                 }

                                 if (rb  == `isofile)
                                 {
                                     CDCreator::Config["result"] = "iso";
                                     CDCreator::Config["isofile"] = (string)UI::QueryWidget(`id(`isofile_path), `Value);

                                 }
                                 else
                                 {
                                     CDCreator::Config["result"] = "tree";

                                 }
                                 CDCreator::Config["savespace"] = (boolean)UI::QueryWidget(`id(`savespace), `Value);
                                 CDCreator::Config["publisher"] = (string)UI::QueryWidget(`id(`pub), `Value);
                                 CDCreator::Config["preparer"] = (string)UI::QueryWidget(`id(`prep), `Value);
                                 break;
                             }
                             else if (ret != `directory && ret != `isofile)
			     {
                                 y2error("unexpected retcode: %1", ret);
                                 continue;
                             }
                         }

                         return (symbol)ret;
    }

    /**
     * Dialog for selecting the sources
     * @return symbol
     */
    define symbol sourceDialog() ``{

        /* dialog caption */
        string caption = _("Source Selection");

        SourceManager::ReadSources();
        list sources = fillSourceTable([], true , "dir");
        y2debug("sources: %1", sources);

        term table =
            `Table( `id( `table ), `opt( `keepSorting ),
                    `header(_("Selected"),  _("Status"), _("Name"), _("URL") ),
                    sources
                  );


        term buttons =
            `HBox(
                    `PushButton(`id(`select), Label::SelectButton() ),
                    `PushButton(`id(`remove), Label::RemoveButton() )
                 );


        term contents =
	    `VBox(
		table,
		`VSpacing(0.5),
		buttons
	    );

        Wizard::SetContentsButtons(caption, contents, HELPS["sourceDialog"]:"",
                Label::BackButton(), Label::NextButton());


        list<integer> selected_items = CDCreator::UrlToId(CDCreator::Config["sources"]:[]);

	foreach(integer i, selected_items, {
            UI::ChangeWidget(`id(`table), `Item(i, 0) , _("X"));
        });

        any ret = nil;


        while(true) {
            ret = UI::UserInput();
            /* abort? */
            if(ret == `abort || ret == `cancel) {
                if(CDCreator::ReallyAbort()) break;
                else continue;
            }
            else if (ret == `select)
            {
                integer SrcID = (integer)UI::QueryWidget(`id(`table), `CurrentItem);

		// Check architecture
		map general = Pkg::SourceGeneralData(SrcID);
		string source_path = URL::Parse(general["url"]:"")["path"]:"";
		y2internal("source_path: %1", source_path);

		map<string,string> read_content = (map<string,string>)SCR::Read(.content_file, source_path + "/content");
		y2internal("Read content files: %1", read_content);

		boolean found_architecture = false;
		foreach(string key, string value, read_content,
		    {
			if (key == "ARCH." + Arch::architecture())
			{
			    found_architecture = true;
			    break;
			}
		    }
		);

		y2milestone("Architecture %1 is supported: %2", Arch::architecture(), found_architecture);

		if (found_architecture)
		{
		    if (!contains(selected_items, SrcID))
		    {
			selected_items = add (selected_items, SrcID );
		    }

		    UI::ChangeWidget(`id(`table), `Item(SrcID, 0) , _("X"));
		}
		else
		{
		    Report::Error(sformat(_("The source does not support architecture of this machine (%1).\nSelect another source."), Arch::architecture()));
		}
            }
            else if (ret == `remove)
            {
                integer SrcID = (integer)UI::QueryWidget(`id(`table), `CurrentItem);
                selected_items = filter(integer i, selected_items, ``(SrcID!=i ));
                UI::ChangeWidget(`id(`table), `Item(SrcID, 0) , "");
            }
            else if(ret == `next)
            {
                y2milestone("selected items: %1", selected_items);
                CDCreator::Config["sources"] = CDCreator::getSourceURLs(selected_items);
                y2milestone("sources: %1", CDCreator::Config["sources"]:[] );
                if (size(CDCreator::Config["sources"]:[])  == 0 )
                {
                    Report::Error(_("Select at least one source."));
                    continue;
                }
                CDCreator::checkProductDependency();
                break;
            }
            else if( ret == `back) {
                break;
            }
            else {
                y2error("unexpected retcode: %1", ret);
                continue;
            }
        }

        return (symbol)ret;
    }

    /**
     * Configure3 dialog
     * @return dialog result
     */
    define symbol isolinuxDialog () ``{

        /* dialog caption */
        string caption = _("CD Creator Configuration");


        string isolinux = CDCreator::Readisolinux();

        // FIXME: Manage files for other archs
        string bootconfig = "isolinux.cfg";

        term contents =
                    `VBox(
                        `MultiLineEdit(`id(`isolinux),
                            sformat(_("File Contents: %1"), bootconfig),
                            isolinux
                            ),
                        `PushButton(`id(`loadfile), _("Load File"))
                        );


        Wizard::SetContentsButtons(caption, contents, HELPS["bootconfig"]:"",
                Label::BackButton(), Label::NextButton());

        any ret = nil;
        while(true) {
            ret = UI::UserInput();
            /* abort? */
            if(ret == `abort || ret == `cancel) {
                if(CDCreator::ReallyAbort()) break;
                else continue;
            }

            else if (ret ==`loadfile)
            {
                any new_file = UI::AskForExistingFile( "" , "*", _("Select File"));
                if (new_file != nil)
                {
                    if (SCR::Read(.target.size, new_file)> 0)
                    {
                        string file = (string)SCR::Read(.target.string, new_file );
                        UI::ChangeWidget(`id(`isolinux), `Value, (string)file);
                    }
                }
                continue;
            }
            else if(ret == `next) {
                string isolinux_new = (string)UI::QueryWidget(`id(`isolinux), `Value);
                if (isolinux_new != isolinux)
                {
                    CDCreator::Config["bootconfig"] = isolinux_new;
                }


                break;
            }
            else if( ret == `back) {
                break;
            }
            else {
                y2error("unexpected retcode: %1", ret);
                continue;
            }
        }

        if (CDCreator::Config["profile"]:""!="" && ret == `next)
            return `autoyast;
        return (symbol)ret;
    }

    define void CheckCode10Source()
    {
	boolean code10 = false;
	foreach (string url , CDCreator::Config["sources"]:[],
	{
            integer i = SourceManager::getSourceId(url);
	    map sd = SourceManager::SourceData(i);
	    map parsed = URL::Parse(sd["url"]:"");
	    string source = parsed["path"]:"";

	    y2debug("Source: %1, path: %2", url, source);

	    code10 = code10 || SCR::Read(.target.size, source + "/boot/" + Arch::architecture()) >= 0;
        });

	y2milestone("CODE10 source: %1", code10);

	// add code10 flag - /boot directory layout
	CDCreator::Config["code10"] = code10;
    }

    symbol autoyastPackages ()
    {
        string base_selection = "";
        //Pkg::TargetFinish ();
        Popup::ShowFeedback(_("Reading data from Package Database..."), _("Please wait..."));

        Pkg::TargetFinish ();
        string tmp = (string)SCR::Read( .target.tmpdir );
        SCR::Execute(.target.mkdir, tmp + "/tmproot");
        Pkg::TargetInit( tmp + "/tmproot" , true);

	// add code10 flag if the new source type is detected
	CheckCode10Source();

        boolean  success =  CDCreator::EnableSource();

        // Pkg::SourceStartManager(true);

        if (CDCreator::Config["profile"]:""!= "" && ! CDCreator::profile_parsed)
        {
            if(!CDCreator::readControlFile(CDCreator::Config["profile"]:""))
                return `overview;
            // set the new selection
            y2debug("Config: %1", CDCreator::Config );

	    if (CDCreator::Config["type"]:`unknown == `patterns)
	    {
		string base_pat = CDCreator::Config["base"]:"";

		if (size(base_pat) > 0)
		{
		    Pkg::ResolvableInstall(base_pat, `pattern);
		    y2milestone("Selecting pattern: %1", base_pat);
		}

		if (size(CDCreator::Config["addons"]:[]) > 0)
		{
		    foreach(string addon, CDCreator::Config["addons"]:[], ``{
			    Pkg::ResolvableInstall(addon, `pattern);
			    y2milestone("Selecting pattern: %1", addon);
		    });
		}
	    }
	    else
	    {
		boolean pkgret = Pkg::SetSelection( CDCreator::Config["base"]:"" );

		foreach(string addon, CDCreator::Config["addons"]:[], ``{
			Pkg::SetSelection( addon );
			});
	    }

            if (size(CDCreator::Config["packages"]:[] ) > 0)
            {
                foreach(string p, CDCreator::Config["packages"]:[], ``{
                        y2milestone("selecting package for installation: %1 -> %2", p, Pkg::PkgInstall(p));
                        });
            }

            Pkg::PkgSolve(true);

            list allpacs = Pkg::GetPackages(`selected, true);
            y2milestone("All packages: %1 ( %2 )", allpacs, size(allpacs));
        }
        Popup::ClearFeedback();
        return `next;
    }

    /**
     * Start the detailed package selection. If 'mode' is non-nil, it will be
     * passed as an option to the PackageSelector widget.
     *
     * Returns `accept or `cancel .
     **/
    symbol detailedSelection( symbol mode )
    {
	Pkg::SaveState();

	// Open empty dialog for instant feedback

	UI::OpenDialog(`opt(`defaultsize),
		       `ReplacePoint(`id( `rep),
				     `Label( _("Reading package database...") )
				     )
		       );

	// This will take a while: Detailed package data are retrieved
	// while the package manager is initialized
	UI::ReplaceWidget(`rep,
			  mode == nil ?
			  `PackageSelector(`id(`packages ), StorageDevices::FloppyDevice ) :
			  `PackageSelector(`id(`packages ), `opt(mode), StorageDevices::FloppyDevice )
			  );

	symbol result = (symbol) UI::RunPkgSelection(`id(`packages ) );
	UI::CloseDialog();
	y2milestone( "Package selector returned  %1", result );

	if (result == `accept)
	    Pkg::ClearSaveState();
	else
	    Pkg::RestoreState(false);

	return result;
    }

    /**
     * Start the pattern selection dialog. If the UI does not support the
     * PatternSelector, start the detailed selection with "selections" as the
     * initial view.
     **/
    symbol patternSelection()
    {
	if ( ! UI::HasSpecialWidget(`PatternSelector ) ||
	     UI::WizardCommand(`Ping() ) != true	 )
	{
	    return detailedSelection( nil );	// Fallback: detailed selection
	}

	// switch to packager textdomain, reuse the translations

	// Help text for software patterns / selections dialog
        string helptext = _("<p>
Select one of the following <b>base</b> selections and click <i>Detailed<i> to add
more <b>add-on</b> selections and packages.
</p>");

	Wizard::SetContents(
			    /* dialog caption */
			    _("Software Selection"),
			    `PatternSelector(`id(`patterns ) ),
			    helptext,
			    true,	// has_back
			    true );	// has_next

	Wizard::SetDesktopIcon( "sw_single" );

	symbol result = nil;

	repeat
	{
	    result = (symbol) UI::RunPkgSelection(`id(`patterns ) );
	    y2milestone( "Pattern selector returned %1", result );

	    if ( result == `details )
	    {
		result = detailedSelection( nil );

		if ( result == `cancel )
		    // don't get all the way out - the user might just have
		    // been scared of the gory details.
		    result = nil;

	    }

	} until ( result == `cancel || result == `accept );

	if (result == `accept)
	{
	    result = `next;
	}

	return result;
    }

    /**
     * Select packages
     * @return symbol
     */
    define symbol packageSelector() ``{

        any ret = nil;

	// set a mount point - there is no use to display DU of the current system
	Pkg::TargetInitDU([ $[ "name" : "/", "free" : 999*1024*1024 /* 999GB */, "used" : 0, "readonly" : false ] ]);

        /* dialog caption */
        string caption = _("Software Selection");

        string helptext = _("<p>
Select one of the following <b>base</b> selections and click <i>Detailed<i> to add
more <b>add-on</b> selections and packages.
</p>");
        Pkg::TargetFinish ();


        Popup::ShowFeedback(_("Reading data from Package Database..."), _("Please wait..."));
        CDCreator::enableSources();

        Popup::ClearFeedback();


        Wizard::CreateDialog();
        Wizard::SetDesktopIcon("cd-creator");

        string base_selection = "";

        Wizard::SetContents(caption,
                `HVCenter(`Label(_("Reading package database..."))),
                helptext, false, true);

        list<string> available_base_selections = Pkg::GetSelections( `available, "base" );
        y2milestone ("available_base_selections %1", available_base_selections);

        list<string> current_base_selections = Pkg::GetSelections( `selected, "base" );
        y2milestone ("current_base_selections %1", current_base_selections);

	boolean using_patterns = false;

	// use patterns instead of selections
	if (size(available_base_selections) == 0)
	{
	    y2milestone("No selections, using patterns");
	    using_patterns = true;

	    string base_pattern = CDCreator::Config["base"]:"";
	    list<string> addons = CDCreator::Config["addons"]:[];

	    if (size(addons) > 0 || CDCreator::Config["base"]:"" != "")
	    {
		y2milestone("base pattern: %1, addons: %2", base_pattern, addons);

		// select the base pattern
		if (base_pattern != "")
		{
		    Pkg::ResolvableInstall(base_pattern, `pattern);
		}

		// select the addons
		foreach(string addon, CDCreator::Config["addons"]:[],
		{
		    Pkg::ResolvableInstall(addon, `pattern);
		});

		Pkg::PkgSolve(true);

		// add extra packages
		list<string> packages = CDCreator::Config["packages"]:[];
		if (size(packages) > 0)
		{
		    foreach(string p, packages,
		    {
			y2milestone("selecting package for installation: %1 -> %2", p, Pkg::PkgInstall(p));
		    });
		}
	    }

	    ret = patternSelection();
	}
	else
	{
	    // save the current base selection
	    string save_selection = current_base_selections[0]:"default";

	    // Construct a box with radiobuttons for each software base configuration
	    term baseconfs_box = `VBox();

	    // sort available_base_selections by order
	    // $[ "order" : [ "name", "summary" ], .... ]

	    map<string, list> sorted_base_selections = $[];
	    foreach( string selection, available_base_selections,
		    ``{
		    map selection_data = Pkg::SelectionData (selection);
		    if (selection_data != nil)
		    {
		    string order = selection_data["order"]:"";
		    // use selection name as sort criteria if not given
		    if (order == "")
		    {
		    order = selection;
		    }
		    sorted_base_selections[order] = [selection, selection_data["summary"]:("'"+selection+"'")];
		    }
		    });
	    // construct display box in order
	    boolean selected = false;
	    foreach(string  order, list data, sorted_base_selections,
		    ``{
		    {
		    if (CDCreator::Config["base"]:"" == "" && !selected)
		    {
		    CDCreator::Config["base"] = data[0]:"";
		    selected = true;
		    }
		    baseconfs_box = add( baseconfs_box, `Left(`RadioButton(`id(data[0]:""),     // id
				`opt(`notify, `autoShortcut),
				data[1]:"",              // descrption
				(data[0]:"" == CDCreator::Config["base"]:"")   )));
		    }
		    });

	    term contents = `HVSquash(
		    `VBox(
			`HSquash(
			    `VBox(
				`Frame(
				    // Frame caption for software selection
				    _("Software"),
				    `VBox(
					`VSpacing(0.3),
					`RadioButtonGroup(`id(`baseconf),`opt(`notify), baseconfs_box),
					`VSpacing(0.3)
					)
				    ),
				`VSpacing(),

				// Push button that will pop up the detailed
				// software selection (e.g. Multimedia, Games,
				// KDE, Gnome, ... - not the individual packages!)
				`PushButton( `id(`details),  _("&Detailed selection...") )
				)
			    )
			)
		    );

	    Wizard::SetContentsButtons(caption, contents, helptext,
		    Label::BackButton(), Label::NextButton());



	    boolean selret = false;
	    repeat
	    {
		ret = Wizard::UserInput();

		// get the newly selected base configuration
		base_selection = (string) UI::QueryWidget( `id(`baseconf),`CurrentButton );

		// Inform the package manager on `next about the new (only about a NEW) selection
		// or if the selection has changed

		if (ret == `next)
		{
		    // set the new selection
		    boolean pkgret = Pkg::SetSelection( base_selection );
		    if (size(CDCreator::Config["packages"]:[] ) > 0)
		    {
			foreach(string p, CDCreator::Config["packages"]:[], ``{
				y2debug("selecting package for installation: %1 -> %2", p, Pkg::PkgInstall(p));
				});
		    }
		}
		else if ( ret == `abort)
		{
		    if(CDCreator::ReallyAbort()) break;
		    else continue;
		}
		else if ( ret == `details )
		{
		    ret = `again;

		    Pkg::SetSelection( base_selection );

		    foreach(string addon, CDCreator::Config["addons"]:[], ``{
			    Pkg::SetSelection( addon );
			    });

		    Pkg::PkgSolve(true);
		    if (size(CDCreator::Config["packages"]:[] ) > 0)
		    {
			foreach(string p,CDCreator::Config["packages"]:[] , ``{
				y2milestone("selecting package for installation: %1 -> %2", p, Pkg::PkgInstall(p));
				});
		    }

		    while ( ret == `again )
		    {
			ret = (symbol)WFM::CallFunction( "inst_packages", [ true, true ] );

			if ( ret == `accept )
			    ret = `next;
		    }
		}
	    }  until ( ret == `next  || ret == `back);
	}

	// activate the selections
        Pkg::PkgSolve(true);
        list allpacs = Pkg::GetPackages(`selected, true);
        y2milestone("All packages: %1 ( %2 )", allpacs, size(allpacs));

        list seladd = [];
        list selbase = [];
        if ( ret != `back )
        {
	    if (!using_patterns)
	    {
		seladd =  Pkg::GetSelections(`selected, "");
		selbase =  Pkg::GetSelections(`selected, "base");
	    }
	    else
	    {
		seladd =  Pkg::GetPatterns(`selected, "");
		selbase =  Pkg::GetPatterns(`selected, "base");
	    }
        }
        else
        {
            seladd = CDCreator::Config["addons"]:[];
            selbase = [CDCreator::Config["base"]:""];
        }


        CDCreator::Config["packages"] = Pkg::FilterPackages(false, false, true, true);
	y2milestone("User selected packages: %1", CDCreator::Config["packages"]:[]);

        CDCreator::Config["addons"] = seladd;
	y2milestone("selected addons: %1", seladd);
        CDCreator::Config["base"] =   selbase[0]:"";
	y2milestone("selected base: %1", selbase[0]:"");

	// selections or patterns are used in the product
        CDCreator::Config["type"] = using_patterns ? `patterns : `selections;

	// add code10 flag if the new source type is detected
	CheckCode10Source();

        Wizard::CloseDialog();
        return (symbol)ret;
    }


    /**
     * Configuration Summary
     * @return void
     */
    define symbol ConfigSummary() ``{
        import "Summary";

        Wizard::CreateDialog();
        Wizard::SetDesktopIcon("cd-creator");
        string caption = _("Configuration Summary");
        Wizard::SetContents( caption,
                `Empty(),
                "",
                false,
                false);

        if (CDCreator::Config["profile"]:""!="")
	    autoyastPackages();

        string name = CDCreator::Config["name"]:"";
        string old_name = CDCreator::Config["old_name"]:"";
        if (haskey(CDCreator::Configs, old_name) && old_name != "")
        {

            CDCreator::Configs = filter(string k, map<string,any> v, CDCreator::Configs, ``(k!=old_name));
            remove(CDCreator::Config, "old_name");
        }
        CDCreator::Configs[name] = CDCreator::Config;

        // caption
        string summary = "";
        summary = Summary::AddHeader(summary, _("Package Source") );
        summary = Summary::OpenList(summary);
        foreach(string s, CDCreator::Config["sources"]:[], ``{
                summary = Summary::AddListItem(summary, s);
                });
        summary = Summary::CloseList(summary);
        summary = Summary::AddHeader(summary, _("Packages") );

        summary = Summary::AddLine(summary, sformat("%1",
                    size(Pkg::GetPackages(`selected, true))));

        summary = Summary::AddHeader(summary,_("Output Directory"));

        summary = Summary::AddLine(summary,sformat(_("Creating directory tree in:<br><b> %1/%2 </b>"),
                    CDCreator::Config["iso-directory"]:"",
                    CDCreator::Config["name"]:"") );


        term contents =
            `RichText(summary);

        string help_text = _("<p>Verify if the data in the summary is correct then
press Next to continue.
</p>");

        Wizard::SetContentsButtons ( caption,
                contents,
                help_text,
                Label::BackButton (),
                Label::FinishButton ());
        any ret = nil;
        repeat
        {
            ret = UI::UserInput();
        }  until (ret == `next || ret == `back || ret == `abort);
        Wizard::CloseDialog();

        return (symbol)ret;
    }



    /* EOF */
}
