/**
 * File:	include/cd-creator/dialogs.ycp
 * Package:	Configuration of cd-creator
 * Summary:	Dialogs definitions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

    textdomain "cd-creator";

    import "CDCreator";
    import "Wizard";
    import "InstSource";

    import "Label";

    include "cd-creator/helps.ycp";

/**
 * General configuration dialog
 * @return dialog result
 */
    global define symbol Configure1Dialog () ``{

	/* CDCreator configure1 dialog caption */
	string caption = _("CD Creator Configuration");


	string source = CDCreator::Config["source"]:"";
	string name = CDCreator::Config["name"]:"";
	string pkgtype = CDCreator::Config["pkgtype"]:"package-manager";

	// Autoyast
	string profile = CDCreator::Config["profile"]:"";
	boolean copy_profile = CDCreator::Config["copy_profile"]:false;


	// List
	string plain_list = CDCreator::Config["package-list"]:"";

	term c1 =
	    `HBox(
		  `HWeight(10, `Empty()),
		  `HWeight(80, `VBox(
				     `VSquash(
					      `HBox(
						    `TextEntry(`id(`plain_list_loc), _("List Locati&on:"), plain_list),
						    `VBox(
							  `VSpacing(),
							  `Bottom(`PushButton(`id(`open_plain_list), _("Select &File")))
							  )
						    )
					      )
				     )
			   )
		  );

	term c2 =
	    `HBox(
		  `HWeight(10, `Empty()),
		  `HWeight(80, `VBox(
				     `VSquash(
					      `HBox(
						    `TextEntry(`id(`profile_loc), _("Profile Loca&tion:"), profile),
						    `VBox(
							  `VSpacing(),
							  `Bottom(`PushButton(`id(`open_profile), _("Select Fi&le")))
							  )
						    )
					      ),
				     `Left(`CheckBox(`id(`copyprofile), _("Copy Profile to CD i&mage"), copy_profile))
				     )
			   )
		  );

	term v =
	    `VBox (
		   // radio button label
		   `Left (`RadioButton (`id (`plain), `opt (`notify), _("&Plain package list"), pkgtype == "list")),
		   c1,
		   // radio button label
		   `Left (`RadioButton (`id (`autoyast), `opt (`notify), _("&AutoYaST control file"), pkgtype == "autoyast")),
		   c2,
		   // radio button label
		   `Left (`RadioButton (`id (`pkgmgr), `opt (`notify), _("Pac&kage Manager"), pkgtype == "package-manager"))
		   );


	list sources = []; // CDCreator::GetDirSources(source);
	/* CDCreator configure1 dialog contents */
	term contents =
	    `Top
	    (
	     `VBox(
		   `TextEntry(`id(`name), _("&Configuration name:"), name),
		   `Frame(_("Packages"),
			  `VBox(
				`RadioButtonGroup (
						   `id (`pkg),
						   v
						   )
				)
			  )
		   )
	     );

	Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
				   Label::BackButton(), Label::NextButton());



	any ret = nil;
	symbol rb =`none;
	while(true) {

	    rb = (symbol) UI::QueryWidget (`id (`pkg), `CurrentButton );

	    if (rb  == `autoyast)
	    {
		UI::ChangeWidget (`id(`plain_list_loc), `Enabled, false);
		UI::ChangeWidget (`id(`open_plain_list), `Enabled, false);
		UI::ChangeWidget (`id(`profile_loc), `Enabled, true);
		UI::ChangeWidget (`id(`open_profile), `Enabled, true);
		UI::ChangeWidget (`id(`copyprofile), `Enabled, true);
	    }
	    else if (rb == `plain )
	    {
		UI::ChangeWidget (`id(`profile_loc), `Enabled, false);
		UI::ChangeWidget (`id(`open_profile), `Enabled, false);
		UI::ChangeWidget (`id(`copyprofile), `Enabled, false);
		UI::ChangeWidget (`id(`plain_list_loc), `Enabled, true);
		UI::ChangeWidget (`id(`open_plain_list), `Enabled, true);
	    }
	    else  {
		UI::ChangeWidget (`id(`plain_list_loc), `Enabled, false);
		UI::ChangeWidget (`id(`open_plain_list), `Enabled, false);
		UI::ChangeWidget (`id(`profile_loc), `Enabled, false);
		UI::ChangeWidget (`id(`open_profile), `Enabled, false);
		UI::ChangeWidget (`id(`copyprofile), `Enabled, false);
	    }

	    ret = UI::UserInput();



	    /* abort? */
	    if(ret == `abort || ret == `cancel) {
		if(CDCreator::ReallyAbort()) break;
		else continue;
	    }
	    else if(ret == `next ) {

		source = (string)UI::QueryWidget(`id(`source), `Value);
		string name = (string)UI::QueryWidget(`id(`name), `Value);

		if (name == "")
		{
		    Report::Error(_("Fill in the name of the Configuration."));
		    continue;
		}
		if (haskey(CDCreator::Configs, name))
		{
		    Report::Error(_("A Configuration with this name already exists,
Select a new name."));
		    continue;
		}


		CDCreator::Config["old_name"] = CDCreator::Config["name"]:"";
		CDCreator::Config["name"] = name;



		if (rb  == `autoyast)
		{
		    CDCreator::Config["pkgtype"] = "autoyast";
		    CDCreator::Config["profile"] = (string)UI::QueryWidget(`id(`profile_loc), `Value);
		    CDCreator::Config["copy_profile"] = (boolean)UI::QueryWidget(`id(`copyprofile), `Value);
		}
		else if (rb == `plain )
		{
		    CDCreator::Config["pkgtype"] = "list";
		    CDCreator::Config["package-list"] = (string)UI::QueryWidget(`id(`plain_list_loc), `Value);
		}
		else  {
		    CDCreator::Config["pkgtype"] = "package-manager";
		}
		CDCreator::modified = true;
		break;
	    }
	    else if ( ret == `back)
	    {
		break;
	    }
	    else if (ret ==`open_plain_list)
	    {
		any new_file = UI::AskForExistingFile("" , "*",  _("Select File"));
		if (new_file != nil)
		{
		    UI::ChangeWidget(`id(`plain_list_loc), `Value, (string) new_file);
		}
		continue;
	    }
	    else if (ret ==`open_profile)
	    {
		any new_file = UI::AskForExistingFile( "" , "*", _("Select File"));
		if (new_file != nil)
		{
		    UI::ChangeWidget(`id(`profile_loc), `Value, (string)new_file);
		}
		continue;
	    }
	    else {
		y2error("unexpected retcode: %1", ret);
		continue;
	    }
	}

	return (symbol)ret;
    }

/**
 * Configure2 dialog
 * @return dialog result
 */
    global define symbol Configure2Dialog () ``{

	/* CDCreator configure2 dialog caption */
	string caption = _("CD Creator Configuration");

	string dirtree = CDCreator::Config["iso-directory"]:"";
	string result = CDCreator::Config["result"]:"iso";
	string db = CDCreator::Config["database"]:"original";
	string isofile_path = CDCreator::Config["isofile"]:"";
	boolean savespace = CDCreator::Config["savespace"]:false;

	if (isofile_path == "")
	{
	    isofile_path = CDCreator::Config["name"]:"" + ".iso";
	}

	boolean keeptree = CDCreator::Config["keeptree"]:false;

	/* CDCreator configure2 dialog contents */
	term contents =
	    `Top
	    (
	     `VBox(
		   /*
		     `Frame(_("Package Database"),

		     `RadioButtonGroup(`id(`pkgdb),
		     `VBox(
		     `Left(`RadioButton(`id(`origdb), `opt (`notify), _("Use original Package &Database"), db == "original")),
		     `Left(`RadioButton(`id(`createdb),`opt (`notify),  _("Create ne&w Packa&ge Database"), db == "new" ))
		     )
		     )
		     ),*/
		   `Frame(_("Output:"),
			  `VBox(
				`VSquash(
					 `HBox(
					       `TextEntry(`id(`dirtree), _("&Path to generated directory tree:"), dirtree),
					       `VBox(
						     `VSpacing(),
						     `Bottom(`PushButton(`id(`open_dir), _("&Select Directory")))
						     )
					       )
					 ),
				`RadioButtonGroup(`id(`result),
						  `VBox(
							`Left(`RadioButton(`id(`isofile),`opt (`notify), _("&Generate ISO image file"), result == "iso")),
							`HBox(
							      `HWeight(10, `Empty()),
							      `HWeight(80,
								       `VBox(
									     `HBox(
										   `HWeight(2,`TextEntry(`id(`isofile_path), _("&ISO image file:"), isofile_path)),
										   `HWeight(1, `Empty())
										   ),
									     `Left(`CheckBox(`id(`keepdir), _("Keep direct&ory tree"), keeptree))
									     )
								       )
							      ),
							`Left(`RadioButton(`id(`directory), `opt (`notify),  _("Create Direcotry &Tree only"), result == "tree"))
							)
						  )
				)

			  ),
		   `Frame(_("Other Options"),
			  `VBox(
				`Left(`CheckBox(`id(`savespace), _("Copy only needed files to save space."), savespace))
				)
			  )

		   )

	     );

	Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
				   Label::BackButton(), Label::NextButton());

	any ret = nil;
	while(true) {

	    symbol rb = (symbol)UI::QueryWidget(`id(`result), `CurrentButton);
	    if (rb == `isofile)
	    {
		UI::ChangeWidget(`id(`isofile_path), `Enabled, true);
		UI::ChangeWidget(`id(`keepdir), `Enabled, true);

	    }
	    else
	    {
		UI::ChangeWidget(`id(`isofile_path), `Enabled, false);
		UI::ChangeWidget(`id(`keepdir), `Enabled, false);

	    }


	    ret = UI::UserInput();

	    /* abort? */
	    if(ret == `abort || ret == `cancel) {
		if(CDCreator::ReallyAbort()) break;
		else continue;
	    }
	    else if (ret ==`open_dir)
	    {
		any new_dir = UI::AskForExistingDirectory( dirtree, _("Select Directory"));
		if (new_dir != nil)
		{
		    UI::ChangeWidget(`id(`dirtree), `Value, (string) new_dir);
		    /*
		      string iso = (string)UI::QueryWidget(`id(`isofile_path), `Value);
		      if (findfirstof( iso, "/") == nil && iso != "")
		      {
		      UI::ChangeWidget(`id(`isofile_path), `Value, new_dir + "/" + iso );
		      }
		    */
		}
		continue;
	    }
	    else if (ret == `back)
	    {
		break;
	    }
	    else if(ret == `next)
	    {
		/*
		  symbol dbrb = (symbol)UI::QueryWidget(`id(`pkgdb), `CurrentButton);
		  if (dbrb == `origdb)
		  {
		  CDCreator::Config["database"] = "original";
		  }
		  else
		  {
		  CDCreator::Config["database"] = "new" ;
		  }

		*/
		string isodir = (string) UI::QueryWidget(`id(`dirtree), `Value);
		if (isodir == "")
		{
		    Report::Error(_("Path to generated directory tree missing!"));
		    continue;
		}
		else
		{
		    CDCreator::Config["iso-directory"] = isodir;
		}

		if (rb  == `isofile)
		{
		    CDCreator::Config["result"] = "iso";
		    CDCreator::Config["isofile"] = (string)UI::QueryWidget(`id(`isofile_path), `Value);
		    CDCreator::Config["keeptree"] = (boolean)UI::QueryWidget(`id(`keepdir), `Value);

		}
		else
		{
		    CDCreator::Config["result"] = "tree";

		}
		CDCreator::Config["savespace"] = (boolean)UI::QueryWidget(`id(`savespace), `Value);
		break;
	    }
	    else {
		y2error("unexpected retcode: %1", ret);
		continue;
	    }
	}

	return (symbol)ret;
    }

/**
 * Dialog for selecting the sources
 * @return symbol
 */
    global define symbol sourceDialog() ``{

	/* dialog caption */
	string caption = _("Source Selection");

	InstSource::ReadSources();
	list sources = InstSource::fillSourceTable([], true , "dir");


	term table =
	    `Table( `id( `table ), `opt( `keepSorting ),
		    `header(_("Selected"),  _("Status"), _("Name"), _("URL") ),
		    sources
		    );


	term buttons =
	    `HBox(
		  `PushButton(`id(`select), Label::SelectButton() ),
		  `PushButton(`id(`remove), Label::RemoveButton() )
		  );


	term contents =
	    `Top(
		 `VBox(
		       table,
		       `VSpacing(0.5),
		       buttons
		       )
		 );

	Wizard::SetContentsButtons(caption, contents, HELPS["sourceDialog"]:"",
				   Label::BackButton(), Label::NextButton());


	list<integer> selected_items = maplist(string url , CDCreator::Config["sources"]:[], ``{
	    integer i = InstSource::getSourceID(url);	    
	    UI::ChangeWidget(`id(`table), `Item(i, 0) , _("X"));
	    return (i);
	});

	any ret = nil;


	while(true) {
	    ret = UI::UserInput();
	    /* abort? */
	    if(ret == `abort || ret == `cancel) {
		if(CDCreator::ReallyAbort()) break;
		else continue;
	    }
	    else if (ret == `select)
	    {
		integer SrcID = (integer)UI::QueryWidget(`id(`table), `CurrentItem);
		selected_items = add (selected_items, SrcID );
		UI::ChangeWidget(`id(`table), `Item(SrcID, 0) , _("X"));
	    }
	    else if (ret == `remove)
	    {
		integer SrcID = (integer)UI::QueryWidget(`id(`table), `CurrentItem);
		selected_items = filter(integer i, selected_items, ``(SrcID!=i ));
		UI::ChangeWidget(`id(`table), `Item(SrcID, 0) , _(""));
	    }
	    else if(ret == `next)
	    {
		y2milestone("selected items: %1", selected_items);
		CDCreator::Config["sources"] = CDCreator::getSourceURLs(selected_items);
		y2milestone("sources: %1", CDCreator::Config["sources"]:[] );
		if (size(CDCreator::Config["sources"]:[])  == 0 )
		{
		    Report::Error(_("You have to select at least one source."));
		    continue;
		}
		CDCreator::checkProductDependency();			
		break;
	    }
	    else if( ret == `back) {
		break;
	    }
	    else {
		y2error("unexpected retcode: %1", ret);
		continue;
	    }
	}

	return (symbol)ret;
    }

/**
 * Configure3 dialog
 * @return dialog result
 */
    global define symbol isolinuxDialog () ``{

	/* dialog caption */
	string caption = _("CD Creator Configuration");


	string isolinux = CDCreator::Readisolinux();

	// FIXME: Manage files for other archs
	string bootconfig = "isolinux.cfg";

	term contents =
	    `Top(
		 `VBox(
		       `MultiLineEdit(`id(`isolinux),
				      sformat(_("File contents: %1"), bootconfig),
				      isolinux
				      )
		       )
		 );


	Wizard::SetContentsButtons(caption, contents, HELPS["c3"]:"",
				   Label::BackButton(), Label::NextButton());

	any ret = nil;
	while(true) {
	    ret = UI::UserInput();
	    /* abort? */
	    if(ret == `abort || ret == `cancel) {
		if(CDCreator::ReallyAbort()) break;
		else continue;
	    }
	    else if(ret == `next) {
		string isolinux_new = (string)UI::QueryWidget(`id(`isolinux), `Value);
		if (isolinux_new != isolinux)
		{
		    CDCreator::Config["bootconfig"] = isolinux_new;
		}


		break;
	    }
	    else if( ret == `back) {
		break;
	    }
	    else {
		y2error("unexpected retcode: %1", ret);
		continue;
	    }
	}

	return (symbol)ret;
    }


/**
 * Select packages
 * @return symbol
 */
    global define symbol packageSelector() ``{

	string language = UI::GetLanguage(true);

	/* dialog caption */
	string caption = _("Software Selection");

	string helptext = _("<p>
Select one of the following <b>base</b> selections and click <i>Detailed<i> to add
more <b>add-on</b> selections and packages.
</p>
");
	Pkg::TargetFinish ();


	Popup::ShowFeedback(_("Reading data from Package Database"), _("Please wait..."));
    
	Pkg::SourceStartManager(true);
	//CDCreator::enableSources();

	Popup::ClearFeedback();
	Popup::FinishFeedback();


    
	Wizard::CreateDialog();

	Wizard::SetContents(caption,
			    `HVCenter(`Label(_("Reading package database..."))),
			    helptext, false, true);

	list available_base_selections = Pkg::GetSelections( `available, "base" );
	y2milestone ("available_base_selections %1", available_base_selections);

	list current_base_selections = Pkg::GetSelections( `selected, "base" );
	y2milestone ("current_base_selections %1", current_base_selections);

	// save the current base selection
	string save_selection = current_base_selections[0]:"default";

	// Construct a box with radiobuttons for each software base configuration
	term baseconfs_box = `VBox();

	// sort available_base_selections by order
	// $[ "order" : [ "name", "summary" ], .... ]

	map sorted_base_selections = $[];
	foreach( string selection, available_base_selections,
		 ``{
	    map selection_data = Pkg::SelectionData (selection);
	    if (selection_data != nil)
	    {
		string order = selection_data["order"]:"";
		// use selection name as sort criteria if not given
		if (order == "")
		{
		    order = selection;
		}
		sorted_base_selections[order] = [selection, selection_data["summary"]:("'"+selection+"'")];
	    }
	});

	// construct display box in order
	boolean selected = false;
	foreach(string  order, list data, sorted_base_selections,
		``{
	    {
		if (CDCreator::Config["base"]:"" == "" && !selected)
		{
		    CDCreator::Config["base"] = data[0]:"";
		    selected = true;
		}
		baseconfs_box = add( baseconfs_box, `Left(`RadioButton(`id(data[0]:""),     // id
								       `opt(`notify, `autoShortcut),
								       data[1]:"",              // descrption
								       (data[0]:"" == CDCreator::Config["base"]:"")   )));
	    }
	});

	term contents = `HVSquash(
				  `VBox(
					`HSquash(
						 `VBox(
						       `Frame(
							      // Frame caption for software selection
							      _("Software"),
							      `VBox(
								    `VSpacing(0.3),
								    `RadioButtonGroup(`id(`baseconf),`opt(`notify), baseconfs_box),
								    `VSpacing(0.3)
								    )
							      ),
						       `VSpacing(),

						       // Push button that will pop up the detailed
						       // software selection (e.g. Multimedia, Games,
						       // KDE, Gnome, ... - not the individual packages!)
						       `PushButton( `id(`details),  _("&Detailed selection...") )
						       )
						 )
					)
				  );
    
	Wizard::SetContentsButtons(caption, contents, helptext,
				   Label::BackButton(), Label::NextButton());


	any ret = nil;

	boolean selret = false;
	repeat
	    {
		ret = Wizard::UserInput();

		// get the newly selected base configuration
		string base_selection = (string) UI::QueryWidget( `id(`baseconf),`CurrentButton );

		// Inform the package manager on `next about the new (only about a NEW) selection
		// or if the selection has changed

		if (ret == `next)
		{
		    // set the new selection
		    boolean pkgret = Pkg::SetSelection( base_selection );
		    if (size(CDCreator::Config["packages"]:[] ) > 0)
		    {
			foreach(string p, CDCreator::Config["packages"]:[], ``{
			    y2milestone("selecting package for installation: %1 -> %2", p, Pkg::PkgInstall(p));
			});
		    }
		}
		else if ( ret == `abort)
		{		
		    if(CDCreator::ReallyAbort()) break;
		    else continue;
		}
		else if ( ret == `details )
		{
		    ret = `again;

		    Pkg::SetSelection( base_selection );

		    foreach(string addon, CDCreator::Config["addons"]:[], ``{
			Pkg::SetSelection( addon );
		    });

		    Pkg::ActivateSelections();
		    if (size(CDCreator::Config["packages"]:[] ) > 0)
		    {
			foreach(string p,CDCreator::Config["packages"]:[] , ``{
			    y2milestone("selecting package for installation: %1 -> %2", p, Pkg::PkgInstall(p));
			});
		    }

		    while ( ret == `again )
		    {
			ret = (symbol)WFM::CallFunction( "inst_packages", [ true, true ] );

			if ( ret == `accept )
			    ret = `next;
		    }
		}
	    }  until ( ret == `next  || ret == `back);

	Pkg::ActivateSelections();
	list allpacs = Pkg::GetPackages(`selected, true);
	y2milestone("All packages: %1 ( %2 )", allpacs, size(allpacs));

	list seladd = [];
	list selbase = [];
	if ( ret != `back )
	{
	    seladd =  Pkg::GetSelections(`selected, "");
	    selbase =  Pkg::GetSelections(`selected, "base");
	}
	else
	{
	    seladd = CDCreator::Config["addons"]:[];
	    selbase = [CDCreator::Config["base"]:""];
	}



	CDCreator::Config["packages"] = Pkg::FilterPackages(false, false, true, true);
	CDCreator::Config["addons"] = seladd;
	CDCreator::Config["base"] =   selbase[0]:"";

	Wizard::CloseDialog();
	return (symbol)ret;
    }


/**
 * Configuration Summary
 */

    global define symbol ConfigSummary() ``{
	import "HTML";



	string name = CDCreator::Config["name"]:"";
	string old_name = CDCreator::Config["old_name"]:"";
	if (haskey(CDCreator::Configs, old_name) && old_name != "")
	{

	    CDCreator::Configs = filter(string k, map v, CDCreator::Configs, ``(k!=old_name));
	    remove(CDCreator::Config, "old_name");
	}
	CDCreator::Configs[name] = CDCreator::Config;


	// caption
	string caption = _("Configuration Summary");
	string html =  HTML::Heading(_("Package Source"));
	html = html + HTML::Para(CDCreator::Config["source"]:"");

	html = html +  HTML::Heading(_("Packages"));
	html = html + HTML::Para(sformat("%1", size(Pkg::GetPackages(`selected, true))));

	html = html +  HTML::Heading(_("Output"));

	html = html + HTML::Para(sformat(_("Creating directory tree in:<br><b> %1/%2 </b>"),
					 CDCreator::Config["iso-directory"]:"", CDCreator::Config["name"]:"") );


	term contents =
	    `RichText(html);

	string help_text = _("<p>Verify if the data in the summary box is correct then
press Next to continue.</p>
");

	Wizard::SetContentsButtons ( caption,
				     contents,
				     help_text,
				     Label::BackButton (),
				     Label::NextButton ());
	any ret = nil;
	repeat
	    {
		ret = UI::UserInput();
	    }  until (ret == `next || ret == `back || ret == `abort);
	return (symbol)ret;
    }



/* EOF */
}
