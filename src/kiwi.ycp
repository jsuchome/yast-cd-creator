{
  textdomain "cd-creator";

  import "CWM";
  import "CWMTab";
  import "CDCreator";
  import "FileUtils";
  import "Label";
  import "Popup";
  import "Summary";
  import "Wizard";

  include "cd-creator/dialogs.ycp";

  string initial_tab	= "config.xml";

  string images_dir	= "/usr/share/kiwi/image";

  // map of current Live ISO configuration
  map LiveISOConfig	= $[];


  // read available the images under /usr/share/kiwi/image/ directory
  list<string> GetAvailableImages (string subdir) {

    list<string> ret	= [];
    map out = (map) SCR::Execute (.target.bash_output, sformat ("ls %1/%2", images_dir, subdir));
    if (out["exit"]:0 != 0)
	return ret;
    foreach (string file, splitstring (out["stdout"]:"", "\n"), {
	if (file != "" && FileUtils::IsDirectory (sformat ("%1/%2/%3", images_dir, subdir, file)))
	    ret	= add (ret, file);
    });
    return ret;
  }

  /**
   * Initialize the contents of richtext with selected software
   */
  define void InitSWRichText (string id) {
    // richtext header
    string rt	= Summary::AddHeader ("", _("Patterns"));
    foreach (string pattern, (list<string>) LiveISOConfig["addons"]:[], {
	rt	= Summary::AddListItem (rt, pattern);
    });
    // richtext header
    rt	= Summary::AddHeader (rt, _("Packages"));
    foreach (string package, (list<string>) LiveISOConfig["packages"]:[], {
	rt	= Summary::AddListItem (rt, package);
    });
    UI::ChangeWidget (`id (id), `Value, rt);
  }

  define void InitSWBootRichText (string id) {
    // richtext header
    string rt	= Summary::AddHeader ("", _("Packages"));
    foreach (string package, ["filesystem", "glibc-locale", "devs", "kernel-default"], {
	rt	= Summary::AddListItem (rt, package);
    });
    UI::ChangeWidget (`id (id), `Value, rt);
  }

  define void InitISOBootCombo (string id) {
    UI::ChangeWidget (`id (id), `Items, GetAvailableImages ("isoboot"));
  }

  define void InitOutputDir (string id) {
    UI::ChangeWidget (`id (id), `Value, LiveISOConfig["iso-directory"]:"");
  }

  define void InitRootDir (string id) {
    UI::ChangeWidget (`id (id), `Value, LiveISOConfig["root"]:"");
  }

  define void InitConfigSh (string id) {
    string file	= LiveISOConfig["config.sh"]:"";
    if (FileUtils::Exists (file))
    {
	string configsh	= (string) SCR::Read (.target.string, file);
	if (configsh != nil)
	    UI::ChangeWidget (`id (id), `Value, configsh);
    }
  }

  define void InitCreateButton (string id) {
    UI::ChangeWidget (`id (id), `Enabled, LiveISOConfig["prepared"]:false);
  }

  /**
   * handler for 'Create' action
   */
  define symbol HandleCreate (string key, map event) {
    if (event["ID"]:nil == key)
    {
	Popup::YesNo ("Create ISO?");
    }
    else if (event["EventType"]:"" == "MenuEvent" || event["EventType"]:"" == "WidgetEvent")
    {
	// disable after some new changes were done
	if (LiveISOConfig["prepared"]:false && LiveISOConfig["prepared_modified"]:false)
	{
	    LiveISOConfig["prepared"]	= false;
	}
	InitCreateButton ("create");
    }
    return nil;
  }

  /**
   * handler for 'Prepare' action
   */
  define symbol HandlePrepare (string key, map event) {
    if (event["ID"]:nil == key)
    {
	Popup::Message ("Physical extend succesfully prepared.");
	LiveISOConfig["prepared"]		= true;
	LiveISOConfig["prepared_modified"]	= false; // TODO set in other handlers
    }
    return nil;
  }

  define symbol HandleSWSelection (string key, map event) {
    if (event["ID"]:nil == key)
    {
        if (CDCreator::EnableSource())
	{
	    // FIXME packageSelector will show, but won't export selected packages???
	    if (packageSelector () != `cancel)
	    {
		CDCreator::LiveISOConfig["addons"]	= CDCreator::Config["addons"]:[];
		CDCreator::LiveISOConfig["packages"]	= CDCreator::Config["packages"]:[];
		LiveISOConfig	= eval (CDCreator::LiveISOConfig);
		InitSWRichText ("rt_sw");
	    }
	}
    }
    return nil;
  }

  map tabs_descr = $[
    "config.xml" : $[
	// tab header
	"header"	: _("Image configuration"),
	"contents"	: `HBox (`HSpacing(1),
	    `VBox (
		`VSpacing (0.2),
		`HBox (
		    `HWeight (1, `HBox (
			"isoboot",
			`VBox (`Label (""), "configure_isoboot")
		    )),
		    `HWeight (1, `VBox (`Label (""), `Left ("compressed")))
		),
		`VSpacing (0.2),
		"version",
		`HBox (
		    `VBox (
			`Left (`Label (_("Software for image"))), "rt_sw", `Right ("configure_sw")
		    ),
		    `VBox (
			`Left (`Label (_("Software for build"))),
			"rt_sw_boot",
			`Right ("configure_sw_boot")
		    )
		),
		/*
		`HBox (
		    "output_dir",
		    `VBox (`Label (""), "browse_output_dir")
		),
		*/
		`VSpacing (0.2)
	    ), `HSpacing(1)),
	"widget_names" : [
	    "isoboot", "configure_isoboot",
	    "compressed",
	    "version",
	    "rt_sw", "configure_sw", "rt_sw_boot", "configure_sw_boot",
//	    "output_dir", "browse_output_dir",
	],
    ],
    "layout" : $[
	// tab header
	"header"	: _("Directory Tree"),
	"contents"	: `HBox (`HSpacing(1),
	    `VBox (
		`VSpacing (0.2),
		`HBox (
		    "root_dir",
		    `VBox (`Label (""), "browse_root_dir")
		),
		`HBox (
		    "config_dir",
		    `VBox (`Label (""), "browse_config_dir")
		),
		/*
		`HBox (
		    "autoyast_path",
		    `VBox (`Label (""), "browse_autoyast")
		),
		*/
		`HBox (
		    "images_path",
		    `VBox (`Label (""), "browse_images")
		),
		`HBox ("config.sh", `Bottom ("import_config.sh")),
		`VSpacing (0.2)
	    ), `HSpacing (1)),
	"widget_names" : ["root_dir", "browse_root_dir", "config_dir", "browse_config_dir",
//	    "autoyast_path", "browse_autoyast",
	    "images_path", "browse_images", "config.sh", "import_config.sh",
	],
    ],
    "description" : $[
	// tab header
	"header"	: _("Description"),
	"contents"	: `HBox (`HSpacing(1),
	    `VBox (
		`VSpacing (0.2),
		"author",
		`VSpacing (0.2),
		"contact",
		`VSpacing (0.2),
		"specification",
		`VStretch ()
	    ), `HSpacing (1)),
	"widget_names" : [ "author", "contact", "specification" ],
    ],
    "users" : $[
	// tab header
	"header"	: _("Users"),
	"contents"	: `HBox (`HSpacing(1),
	    `VBox (
		`VSpacing (0.2),
		"group",
		`VSpacing (0.2),
		"userstable",
		`VSpacing (0.2),
		`HBox ("adduser", "edituser", "deleteuser", `HStretch ()),
		`VSpacing (0.2)
	    ), `HSpacing (1)),
	"widget_names" : [ "group", "userstable", "adduser", "edituser", "deleteuser" ]
    ],
  ];

  map<string, map> widget_descr = $[
    // global widgets
    "prepare"		: $[
	"widget"        : `push_button,
	// pusbutton label
	"label"		: _("&Prepare"),
	// help for "&Prepare" button
	"help"		: _("<p>Push <b>Prepare</b> to prepare physical extend.</p>"),
	"handle"	: HandlePrepare
    ],
    "create"		: $[
	"widget"        : `push_button,
	// pusbutton label
	"label"		: _("&Create ISO"),
	// help for "Cr&eate ISO" button
	"help"		: _("<p>Finally create the ISO image with <b>Create ISO</b>.</p>"),
	"init"		: InitCreateButton,
	"handle"	: HandleCreate
    ],
    // widgets for config.xml tab
    "isoboot" : $[
	"widget"	: `combobox,
	"opt"		: [ `hstretch ],
	// combo box label
	"label"		: _("C&D Boot image"),
	"help"		: _("help for isoboot"),
	"items"		: [],
	"init"		: InitISOBootCombo,
    ],
    "configure_isoboot"	: $[
	"widget"	: `push_button,
	// pusbutton label
	"label"		: _("C&onfigure..."),
	"help"		: _("help for configure_isoboot"),
    ],
    "rt_sw"		: $[
	"widget"	: `richtext,
	"init"		: InitSWRichText,
	"help"		: "help for rt_sw",
	"label"		: "&L", // FIXME not needed, but produces error
    ],
    "configure_sw"	: $[
	"widget"        : `push_button,
	// pusbutton label
	"label"         : _("Ch&ange..."),
	"help"		: _("<p>help for configure_sw</p>"),
	"handle"	: HandleSWSelection
    ],
    "rt_sw_boot"	: $[
	"widget"	: `richtext,
	"init"		: InitSWBootRichText,
	"help"		: _("<p>help for rt_sw_boot</p>"),
	"label"		: "&L",
    ],
    "configure_sw_boot"	: $[
	"widget"        : `push_button,
	// pusbutton label
	"label"         : _("C&hange..."),
	"help"		: _("<p>help for configure_sw_boot</p>"),
    ],
    "output_dir" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("O&utput directory"),
	"help"		: _("help for output dir"),
	"init"		: InitOutputDir,
    ],
    "browse_output_dir"	: $[
	"widget"	: `push_button,
	"label"		: Label::BrowseButton (),
	"help"		: "",
    ],
    "version" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("&Version"),
	"help"		: _("<p>help for version</p>"),
    ],
    "compressed" : $[
	"widget"	: `checkbox,
	// textentry label
	"label"		: _("Co&mpress"),
	"help"		: _("<p>help for compressed</p>"),
    ],
    // ---------------- widgtes for directory structure
    "root_dir" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("P&ath to directory with system configuration"),
	"help"		: _("<p>this is 'root' directory</p>"),
	"init"		: InitRootDir,
    ],
    "browse_root_dir"	: $[
	"widget"	: `push_button,
	"label"		: Label::BrowseButton (),
	"help"		: "",
    ],
    "config.sh" : $[
	"widget"	: `multi_line_edit,
	// textentry label
	"label"		: _("I&mage configuration script"),
	"help"		: _("<p>this is 'config.sh'</p>"),
	"init"		: InitConfigSh,
//	"store" : StoreSysRqSettings, ???
    ],
    "import_config.sh" : $[
	"widget"	: `push_button,
	// textentry label
	"label"		: _("&Import..."),
	"help"		: _("<p>help for import</p>"),
    ],
    "config_dir" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("Pa&th to directory with scripts"),
	"help"		: _("<p>this is 'config' directory</p>"),
    ],
    "browse_config_dir"	: $[
	"widget"	: `push_button,
	// push button label
	"label"		: _("Br&owse..."),
	"help"		: "",
    ],
    "autoyast_path" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("Path to Auto&YaST profile"),
	"help"		: _("<p>this is 'config-yast.xml'</p>"),
    ],
    "browse_autoyast"	: $[
	"widget"	: `push_button,
	// push button label
	"label"		: _("Brow&se..."),
	"help"		: "",
    ],
    "images_path" : $[ // TODO multiline edit as well?
	"widget"	: `textentry,
	// textentry label
	"label"		: _("Pat&h to cleanup script"),
	"help"		: _("<p>this is 'images.sh'</p>"),
    ],
    "browse_images"	: $[
	"widget"	: `push_button,
	// push button label
	"label"		: _("Brows&e..."),
	"help"		: "",
    ],
    // ---------------- widgtes for description tab
    "author" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("&Author"),
	"help"		: _("<p>help for 'author' </p>"),
    ],
    "contact" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("C&ontact"),
	"help"		: _("<p>help for 'contact' </p>"),
    ],
    "specification" : $[
	"widget"	: `multi_line_edit,
	// textentry label
	"label"		: _("&Specification"),
	"help"		: _("<p>help for 'specification' </p>"),
    ],
    // ---------------- widgtes for users tab
    "group" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("&Group name"),
	"help"		: _("<p>help for 'group' </p>"),
    ],
    "userstable" : $[
	"widget"	: `custom,
	"custom_widget" : `Table (`id("table"), `header("")),
	"no_help"	: true
    ],
    "adduser"	: $[
	"widget"	: `push_button,
	"label"		: Label::AddButton (),
	"help"		: "",
    ],
    "edituser"	: $[
	"widget"	: `push_button,
	"label"		: Label::EditButton (),
	"help"		: "",
    ],
    "deleteuser"	: $[
	"widget"	: `push_button,
	"label"		: Label::DeleteButton (),
	"help"		: "",
    ],
  ];

  /**
   * dialog for Live media configuration
   */
  define symbol LiveDialog () {

    LiveISOConfig	= union (CDCreator::LiveISOConfig, $[
	"root"		: images_dir + "/kwliveDVD-suse-10.3/root",
	"config.sh"	: images_dir + "/kwliveDVD-suse-10.3/config.sh",
	"prepared"	: false,
    ]);
y2internal ("current config %1", LiveISOConfig);
    string source	= LiveISOConfig["name"]:"";

    widget_descr["tab"] = CWMTab::CreateWidget($[
        "tab_order"	: ["config.xml", "layout", "description", "users"], //FIXME "drivers"],
	"tabs"		: tabs_descr,
	"widget_descr"	: widget_descr,
	"initial_tab"	: initial_tab,
    ]);
    Wizard::SetContentsButtons("", `VBox (), "", Label::BackButton(), Label::NextButton());

    /*
    term contents	= `VBox (
	`Left (`Label (source)),
	"tab",
	`VSpacing (0.3),
	`HBox ("prepare", "create")
    );
    */
    term contents	= `VBox (
	"tab",
	`VSpacing (0.3),
	`HBox (`Left (`Label (source)), `Right ("prepare"), "create")
    );
    // dialog caption
    string caption = _("Live CD Configuration");
    symbol ret = CWM::ShowAndRun ($[
	"widget_names"		: [ "tab", "prepare", "create" ],
	"widget_descr"		: widget_descr,
	"contents"		: contents,
	"caption"		: caption,
	"back_button"		: Label::BackButton (),
	"next_button"		: Label::FinishButton (),
	"fallback_functions"	: $[]
    ]);
    if (ret != `back && ret != `abort && ret != `cancel) {
	initial_tab = CWMTab::CurrentTab ();
    }
    y2milestone("Returning %1", ret);
    return ret;
  }
}
