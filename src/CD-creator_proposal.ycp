/**
 * File:	clients/CD-creator_proposal.ycp
 * Package:	Configuration of CD-creator
 * Summary:	Proposal function dispatcher.
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * Proposal function dispatcher for CD-creator configuration.
 * See source/installation/proposal/proposal-API.txt
 */

{

textdomain "CD-creator";

import "CDCreator";
import "Progress";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("CDCreator proposal started");

string func = WFM::Args(0);
map param = WFM::Args(1);
map ret = $[];

/* create a textual proposal */
if(func == "MakeProposal") {
    string proposal = "";
    string warning = nil;
    symbol warning_level = nil;
    boolean force_reset = param["force_reset"]:false;

    if(force_reset || !CDCreator::proposal_valid) {
        CDCreator::proposal_valid = true;
	Progress::off();
	CDCreator::Read();
    }
    list sum = CDCreator::Summary(false);
    proposal = select(sum, 0, "");
    Progress::on();

    ret = $[
	"preformatted_proposal" : proposal,
	"warning_level" : warning_level,
	"warning" : warning,
    ];
}
/* run the module */
else if(func == "AskUser") {
    map stored = CDCreator::Export();
    symbol seq = WFM::CallFunction(`CD-creator(.propose));
    if(seq != `next) CDCreator::Import(stored);
    y2debug("stored=%1",stored);
    y2debug("seq=%1",seq);
    ret = $[
	"workflow_sequence" : seq
    ];
}
/* create titles */
else if(func == "Description") {
    ret = $[
	// translators: rich text title for CDCreator in proposals
	"rich_text_title" : _("CDCreator"),
	// translators: menu title for CDCreator in proposals
	"menu_title" : _("&CDCreator"),
	"id" : "CD-creator",
    ];
}
/* write the proposal */
else if(func == "Write") {
    CDCreator::Write();
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
}

/* Finish */
y2debug("ret=%1",ret);
y2milestone("CDCreator proposal finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}
