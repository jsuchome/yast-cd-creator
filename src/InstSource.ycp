/**
 * Module:		inst_source.ycp
 *
 * Author:		Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:
 * Adding, removing and prioritizing of installation sources for packagemanager.
 *
 * $Id$
 */

{
    module "InstSource";
    textdomain "cd-creator";

    import "Popup";
    import "URL";

    integer numSources = 0;


    map generalData = $[];
    map productData = $[];


    /**
     * Read Sources
     * @return void
     */
    global define void ReadSources() ``{
	Pkg::SourceStartManager( false );
	Pkg::SourceStartCache ( false );
	return;
    }


    define map ReadSourceData(integer source) ``{
        map g =  Pkg::SourceGeneralData( source );
	y2debug("generalData: %1", g);
        map p =  Pkg::SourceProductData( source );
	y2debug("productData: %1", p);
	return ((map)union(g,p));
    }


    /**
       Create a table item from a map as returned by the InstSrcManager agent.
       @param source The map describing the source as returned form the agent.
       @return An item suitable for addition to a Table.
    */
    global define term createTableItem( integer source , boolean selectable,  string media_filter) ``{

        // Source data
	map sd = ReadSourceData(source);
	term item = `item();

	map url = URL::Parse(sd["url"]:"");
	if (media_filter == "" || url["scheme"]:"" == media_filter )
	{
	    if (selectable)
		item = `item(
			     `id( source ),
			     "",
			     // corresponds to the "Enable/Disable" button
			     sd["enabled"]:true ? _("On") : _("Off"),
			     sd["label"]:"unknown",
			     sd["url"]:""
			     );
	    else
		item = `item(
			     `id( source ),
			     // corresponds to the "Enable/Disable" button
			     sd["enabled"]:true ? _("On") : _("Off"),
			     sd["label"]:"unknown",
			     sd["url"]:""
			     );
	}
	return item;
    }


    /**
     * Fill sources table with entries from the InstSrcManager agent.
     * @return list list of items
     */
    global define list fillSourceTable(list<integer> sources, boolean selectable, string media_filter) ``{
	if (size(sources) == 0 )
	    sources = Pkg::SourceGetCurrent ( false );

        list items = [];

	items = maplist(integer source, sources, ``{
                y2debug("working on source: %1", source);
	        return(createTableItem( source , selectable, media_filter));
	});

	return items;

    }

    /**
     * Delete a source
     * @param integer id of the source
     * @return boolean true on success
     */
    global define boolean deleteSource( integer id ) ``{
	if ( Pkg::SourceDelete( id ) )
	{
	    return true;
	}
	else
	{
	    Popup::Error( _("Error deleting source.") );
	    return false;
	}
    }


    global define integer getSourceID( string url ) ``{
	list<integer> sources = Pkg::SourceGetCurrent ( false );
	integer id = -1;
	foreach(integer i , sources, ``{
	     map media = Pkg::SourceMediaData(i);
	     if (media["url"]:"" == url )
		 id = i;
	});

	return id;
    }

}
